package net.minestom.server;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;

import javax.lang.model.element.Modifier;

import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

/**
 * Helper class to generate a .java enum
 */
public class EnumGenerator implements CodeGenerator {

    private static final String COMMENT = "//==============================\n//  AUTOGENERATED BY " + EnumGenerator.class.getSimpleName() + "\n//==============================";

    private final String enumName;
    private ParameterSpec[] parameters;
    private List<Method> methods = new LinkedList<>();
    private List<Instance> instances = new LinkedList<>();
    private List<Field> hardcodedFields = new LinkedList<>();
    private List<AnnotationSpec> annotations = new LinkedList<>();
    private String enumPackage;
    private CodeBlock staticBlock;
    private List<Consumer<CodeBlock.Builder>> constructorEnds = new LinkedList<>();

    public EnumGenerator(String packageName, String enumName) {
        this.enumPackage = packageName;
        parameters = new ParameterSpec[0];
        this.enumName = enumName;
    }

    public void setParams(ParameterSpec... parameters) {
        this.parameters = parameters;
    }

    public void addMethod(String name, ParameterSpec[] signature, TypeName returnType, Consumer<CodeBlock.Builder> code) {
        methods.add(new Method(false, name, signature, returnType, code, false));
    }

    public void addVarargMethod(String name, ParameterSpec[] signature, TypeName returnType, Consumer<CodeBlock.Builder> code) {
        methods.add(new Method(false, name, signature, returnType, code, true));
    }

    public void addStaticMethod(String name, ParameterSpec[] signature, TypeName returnType, Consumer<CodeBlock.Builder> code) {
        methods.add(new Method(true, name, signature, returnType, code, false));
    }

    public void addInstance(String name, Object... parameters) {
        instances.add(new Instance(name, parameters));
    }

    public List<JavaFile> generate() {
        TypeSpec.Builder enumClass = TypeSpec.enumBuilder(ClassName.get(enumPackage, enumName)).addModifiers(Modifier.PUBLIC);

        enumClass.addJavadoc(COMMENT);
        for(AnnotationSpec annotation : annotations) {
            enumClass.addAnnotation(annotation);
        }

        for(Instance instance : instances) {
            StringBuilder format = new StringBuilder();
            for (int i = 0; i < instance.parameters.length; i++) {
                if (i != 0) {
                    format.append(", ");
                }
                format.append("$L");
            }

            // generate instances
            TypeSpec arguments = TypeSpec.anonymousClassBuilder(format.toString(), instance.parameters).build();
            enumClass.addEnumConstant(instance.name, arguments);
        }

        if(staticBlock != null) {
            enumClass.addStaticBlock(staticBlock);
        }

        // generate properties & constructor
        if (parameters.length != 0) {
            // properties
            for (ParameterSpec property : parameters) {
                enumClass.addField(FieldSpec.builder(property.type, property.name)
                        .addModifiers(Modifier.PRIVATE)
                        .addAnnotations(property.annotations)
                        .build());
            }

            // hard coded fields
            for (Field hardcoded : hardcodedFields) {
                enumClass.addField(FieldSpec.builder(hardcoded.type, hardcoded.name)
                        .initializer("$L", hardcoded.value)
                        .addModifiers(Modifier.PRIVATE)
                        .build());
            }

            // constructor
            MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder();
            for (int i = 0; i < parameters.length; i++) {
                ParameterSpec param = parameters[i];
                constructorBuilder.addParameter(param);

                // property assignment
                constructorBuilder.addStatement("this.$N = $N", param.name, param.name);
            }
            CodeBlock.Builder generatorEnd = CodeBlock.builder();
            constructorEnds.forEach(b -> b.accept(generatorEnd));
            constructorBuilder.addCode(generatorEnd.build());
            enumClass.addMethod(constructorBuilder.build());
        }

        // generate methods
        for (Method m : methods) {
            MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder(m.name);
            if (m.isStatic) {
                methodBuilder.addModifiers(Modifier.STATIC);
            }
            methodBuilder.addModifiers(Modifier.PUBLIC);
            methodBuilder.returns(m.returnType);
            if(m.vararg) {
                methodBuilder.varargs(true);
            }
            for(ParameterSpec parameter : m.signature) {
                methodBuilder.addParameter(parameter);
            }

            CodeBlock.Builder builder = CodeBlock.builder();
            m.code.accept(builder);
            methodBuilder.addCode(builder.build());

            enumClass.addMethod(methodBuilder.build());
        }

        JavaFile file = JavaFile.builder(enumPackage, enumClass.build())
                .skipJavaLangImports(true)
                .indent("    ")
                .build();
        return Collections.singletonList(file);
    }

    public void setStaticInitBlock(CodeBlock staticBlock) {
        this.staticBlock = staticBlock;
    }

    public void appendToConstructor(Consumer<CodeBlock.Builder> constructorEnding) {
        constructorEnds.add(constructorEnding);
    }

    public void addHardcodedField(TypeName type, String name, String value) {
        hardcodedFields.add(new Field(type, name, value));
    }

    public void addClassAnnotation(AnnotationSpec annotation) {
        annotations.add(annotation);
    }

    public String getPackage() {
        return enumPackage;
    }

    public String getEnumName() {
        return enumName;
    }

    private static class Method {
        private final boolean isStatic;
        private String name;
        private ParameterSpec[] signature;
        private TypeName returnType;
        private Consumer<CodeBlock.Builder> code;
        private boolean vararg;

        private Method(boolean isStatic, String name, ParameterSpec[] signature, TypeName returnType, Consumer<CodeBlock.Builder> code, boolean vararg) {
            this.isStatic = isStatic;
            this.name = name;
            this.signature = signature;
            this.returnType = returnType;
            this.code = code;
            this.vararg = vararg;
        }
    }

    private static class Field {
        private TypeName type;
        private String name;
        private String value;

        public Field(TypeName type, String name, String value) {
            this.type = type;
            this.name = name;
            this.value = value;
        }
    }

    private static class Instance {
        private String name;
        private Object[] parameters;

        private Instance(String name, Object[] parameters) {
            this.name = name;
            this.parameters = parameters;
        }
    }
}
